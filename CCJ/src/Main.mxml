<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/halo"
			   xmlns:components="com.lookbackon.ccj.view.components.*"
			   xmlns:popup="com.adobe.cairngorm.popup.*"
			   xmlns:controller="com.lookbackon.ccj.controller.*"
			   xmlns:task="com.adobe.cairngorm.task.*"
			   xmlns:tasks="com.godpaper.tasks.*"
			   width="520" height="520" maxWidth="500" maxHeight="520"
			   applicationComplete="application1_applicationCompleteHandler(event)"
			   creationComplete="application1_creationCompleteHandler(event)" scriptTimeLimit="60" 
			   xmlns:mochi="com.godpaper.views.mochi.*" xmlns:parsley="http://www.spicefactory.org/parsley">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.contract.Contract;
			import com.godpaper.configs.CCJContextConfig;
			import com.lookbackon.ccj.managers.GameManager;
			import com.lookbackon.ccj.model.ChessPiecesModel;
			import com.lookbackon.ccj.utils.LogUtil;
			
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.LogEventLevel;

			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//For mochi.
			public var _mochiads_game_id:String="47de4a85dd3e213a"; 
			public var _mochiClip:MovieClip;
			//
			private var chessPiecesModel:ChessPiecesModel=ChessPiecesModel.getInstance();
			//
			[Bindable]
			private var logFilters:Array=[
//												"com.lookbackon.ccj.view.components.ChessGasket"
//												,
												"com.lookbackon.ccj.managers.ChessPieceManager"
												,
												"com.lookbackon.AI.searching.*"
//												"com.lookbackon.ccj.model.vos.cvo.CannonVO"		
//												,
//												"com.lookbackon.ccj.view.components.ChessPiece"
//												,
//				"com.lookbackon.AI.searching.*"
//				,
//				"*"
			];
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger=LogUtil.getLogger(Main);

			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//  application1_creationCompleteHandler
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//create chess gaskets.
				//create chess piece
				//create chess pieces' chessVO;
				//create chess pieces' omenVO;
				this.startUpSequenceTask.start();
				//init data struct.@see ChessPieceModel dump info.
				this.dumpFootSprint();
			}

			protected function dumpFootSprint():void
			{
				//design by contract.
				//@see http://opensource.adobe.com/wiki/display/cairngorm/HowToUseCairngormContract
				try
				{
					Contract.precondition(CONFIG::debugging);
					this.traceTarget.level=LogEventLevel.DEBUG;
					Contract.postcondition(CONFIG::debugging);
				}
				catch (error:Error)
				{
					LOG.warn("CONFIG::debugging {0}", error.toString());
				}
				//
				LOG.debug("redPieces:{0}", chessPiecesModel.redPieces.dump());
				LOG.debug("bluePieces:{0}", chessPiecesModel.bluePieces.dump());
				LOG.debug("allPieces:{0}", chessPiecesModel.allPieces.dump());
				//
				LOG.debug("allPieces rotate90:{0}", chessPiecesModel.allPieces.rotate90().dump());
				LOG.debug("allPieces rotate90.bitCount:{0}", chessPiecesModel.allPieces.bitCount);
				LOG.debug("allPieces rotate90.cellCount:{0}", chessPiecesModel.allPieces.cellCount);
			}

			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//GameManager start.
				GameManager.startGame();
				//
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!---
		The context for bootstrapping the whole Parsley framework.
		-->
		<parsley:ContextBuilder config="{CCJContextConfig}"/>
		
		<!---
		The system unique logging component provider LOG.debug/info/warn/error/fatal avenues.
		-->
		<s:TraceTarget id="traceTarget"
					   fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.INFO}"
					   filters="{logFilters}"/>
		<!-- Popups here -->
		<parsley:PopUp open="{GameManager.indicatorReadOut}"
							center="true"
							modal="true"
						    reuse="false"
							>
			<components:IndicatoryProgressBar label="{GameManager.indication}"/>
		</parsley:PopUp>
		
		<parsley:PopUp open="{GameManager.indicatorSubmitScore}"
							center="true"
							modal="true"
							reuse="false"
							>
			<mochi:SubmitScoreAndName/>
		</parsley:PopUp>
		<!-- Controllers here -->
		<!-- Tasks -->
		<task:SequenceTask id="startUpSequenceTask">
			<tasks:CreateChessGasketTask/>
			<tasks:CreateChessPieceTask/>
			<tasks:CreateChessVoTask/>
		</task:SequenceTask>
		<!-- Services here -->
	</fx:Declarations>

	<!-- Views here -->
	<components:ChessBoard id="chessBoard"
						   left="25"
						   right="45"
						   top="25"
						   bottom="25"
						   backgroundImage="@Embed('./assets/images/ChessBoardBG.png')"
						   backgroundImageFillMode="scale"
						   />
	<!-- MochiMedia View -->
	<mochi:MochiUIComponent x="0" y="0">
	</mochi:MochiUIComponent>
	
</s:Application>
