<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/halo" 
			   xmlns:components="com.lookbackon.ccj.view.components.*"
			   creationComplete="application1_creationCompleteHandler(event)" >
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.lookbackon.ccj.CcjConstants;
			import com.lookbackon.ccj.business.factory.ChessFactory;
			import com.lookbackon.ccj.managers.GameManager;
			import com.lookbackon.ccj.model.ChessPositionModelLocator;
			import com.lookbackon.ccj.utils.LogUtil;
			import com.lookbackon.ccj.view.components.ChessPiece;
			import com.lookbackon.ccj.view.components.IChessPiece;
			
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.LogEventLevel;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			[Bindable]
			private var chessPositionModelLocator:ChessPositionModelLocator = ChessPositionModelLocator.getInstance();
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger = LogUtil.getLogger(Main);
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//  application1_creationCompleteHandler
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//create chess gaskets.
				for(var h:int=0;h<ChessBoard.TOTAL_H_LINES;h++)
				{
					for(var v:int=0;v<ChessBoard.TOTAL_V_LINES;v++)
					{
						this.addElement( ChessFactory.createChessGasket([h,v]) );
					}
				}
				//create chess piece
				for(var hh:int=0;hh<ChessBoard.TOTAL_H_LINES;hh++)
				{
					for(var vv:int=0;vv<ChessBoard.TOTAL_V_LINES;vv++)
					{
						if(ChessFactory.createChessPiece([hh,vv])!=null)
						{
							this.addElement( ChessFactory.createChessPiece([hh,vv]) );
						}
					}
				}
				//init data struct.
				LOG.debug("redRook:{0}",chessPositionModelLocator.redRook.dump());
				LOG.debug("redKnight:{0}",chessPositionModelLocator.redKnight.dump());
				LOG.debug("redBishop:{0}",chessPositionModelLocator.redBishop.dump());
				LOG.debug("redOffical:{0}",chessPositionModelLocator.redOffical.dump());
				LOG.debug("redMarshal:{0}",chessPositionModelLocator.redMarshal.dump());
				LOG.debug("redCannon:{0}",chessPositionModelLocator.redCannon.dump());
				LOG.debug("redPawn:{0}",chessPositionModelLocator.redPawn.dump());
				//
				LOG.info("redPieces:{0}",chessPositionModelLocator.redPieces.dump());
				LOG.info("bluePieces:{0}",chessPositionModelLocator.bluePieces.dump());
				LOG.info("allPieces:{0}",chessPositionModelLocator.allPieces.dump());
				//GameManager start.
				GameManager.startGame();
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:TraceTarget fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.INFO}"
					   />
	</fx:Declarations>
	
	<!-- Views here -->
	<components:ChessBoard left="50" right="50" top="25" bottom="25"/>
	
</s:Application>
