<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/halo"
			   xmlns:components="com.godpaper.views.components.*"
			   xmlns:popup="com.adobe.cairngorm.popup.*"
			   xmlns:controller="com.lookbackon.ccj.controller.*"
			   xmlns:task="com.adobe.cairngorm.task.*"
			   xmlns:tasks="com.godpaper.tasks.*"
			   xmlns:mochi="com.godpaper.views.mochi.*"
			   xmlns:parsley="http://www.spicefactory.org/parsley"
			   xmlns:mx1="library://ns.adobe.com/flex/mx"
			   width="550"
			   height="520"
			   maxWidth="550"
			   maxHeight="520"
			   initialize="application1_initializeHandler(event)"
			   applicationComplete="application1_applicationCompleteHandler(event)"
			   creationComplete="application1_creationCompleteHandler(event)"
			   xmlns:task1="org.spicefactory.lib.task.*"
			   xmlns:popups="com.godpaper.views.popups.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.contract.Contract;
			import com.godpaper.configs.BoardConfig;
			import com.godpaper.configs.CCJContextConfig;
			import com.godpaper.configs.GameConfig;
			import com.lookbackon.AI.searching.AttackFalse;
			import com.lookbackon.AI.searching.MiniMax;
			import com.lookbackon.AI.searching.RandomWalk;
			import com.lookbackon.AI.searching.ShortSighted;
			import com.godpaper.consts.CcjConstants;
			import com.godpaper.business.managers.GameManager;
			import com.godpaper.model.ChessPiecesModel;
			import com.godpaper.utils.LogUtil;
			
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.LogEventLevel;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//For mochi.
			public var _mochiads_game_id:String="47de4a85dd3e213a";
			public var _mochiClip:MovieClip;
			//
			private var chessPiecesModel:ChessPiecesModel=ChessPiecesModel.getInstance();
			//
			[Bindable]
			private var logFilters:Array=[
//												"com.lookbackon.ccj.view.components.ChessGasket"
//												,
//				"com.lookbackon.ccj.managers.ChessPieceManager", "com.lookbackon.AI.searching.*"
//												"com.lookbackon.ccj.model.vos.cvo.CannonVO"		
//												,
//												"com.lookbackon.ccj.view.components.ChessPiece"
//												,
//				"com.lookbackon.AI.searching.*"
//				,
				"*"];
			//
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger=LogUtil.getLogger(Main);

			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//application1_initializeHandler
			protected function application1_initializeHandler(event:FlexEvent):void
			{
				//config initialization here.
				//				XmlContextBuilder.build("com/godpaper/configs/logConfig.xml");
				BoardConfig.xLines = 9;
				BoardConfig.yLines = 10;
				BoardConfig.xOffset = 50;
				BoardConfig.yOffset = 50;
				//number of tollgate tips would be matched with tollgates!
				GameConfig.tollgates = [RandomWalk,ShortSighted,AttackFalse,AttackFalse,MiniMax];
				GameConfig.tollgateTips = ["baby intelligence","fellow intelligence","man intelligence","guru intelligence"];
				GameConfig.turnFlag = CcjConstants.FLAG_RED;
			}
			//  application1_creationCompleteHandler
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//create chess gaskets.
				//create chess piece
				//create chess pieces' chessVO;
				//create chess pieces' omenVO;
				this.startUpSequenceTask.start();
				//init data struct.@see ChessPieceModel dump info.
				this.dumpFootSprint();
			}

			public function dumpFootSprint():void
			{
				//design by contract.
				//@see http://opensource.adobe.com/wiki/display/cairngorm/HowToUseCairngormContract
				try
				{
					var CONFIG:Namespace = new Namespace("CONFIG");
					Contract.precondition(CONFIG::debugging);
					this.traceTarget.level=LogEventLevel.DEBUG;
					Contract.postcondition(CONFIG::debugging);
				}
				catch (error:Error)
				{
					LOG.warn("CONFIG::debugging {0}", error.toString());
				}
				//
				LOG.info("redPieces:{0}", chessPiecesModel.redPieces.dump());
				LOG.info("bluePieces:{0}", chessPiecesModel.bluePieces.dump());
				LOG.info("allPieces:{0}", chessPiecesModel.allPieces.dump());
				//
				LOG.info("allPieces rotate90:{0}", chessPiecesModel.allPieces.rotate90().dump());
				LOG.info("allPieces rotate90.bitCount:{0}", chessPiecesModel.allPieces.bitCount);
				LOG.info("allPieces rotate90.cellCount:{0}", chessPiecesModel.allPieces.cellCount);
			}

			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				
				// TODO Auto-generated method stub
				//GameManager start.
				GameManager.start();
				//
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!---
		The context for bootstrapping the whole Parsley framework.
		-->
		<parsley:ContextBuilder config="com.godpaper.configs.CCJContextConfig">
		</parsley:ContextBuilder>

		<!---
		The system unique logging component provider LOG.debug/info/warn/error/fatal avenues.
		-->
		<s:TraceTarget id="traceTarget"
					   fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.INFO}"
					   filters="{logFilters}"
					   />
		<!-- Popups here -->
		<popup:PopUpWrapper open="{GameManager.indicatorReadOut}"
							center="true"
							modal="true">
			<popups:ThinkIndicatory/>
		</popup:PopUpWrapper>

		<parsley:PopUp open="{GameManager.indicatorCheck}"
					   center="true"
					   modal="true">
			<popups:CheckIndicatory/>
		</parsley:PopUp>

		<parsley:PopUp open="{GameManager.indicatorSubmitScore}"
					   center="true"
					   modal="true">
			<mochi:SubmitScoreAndNextRound id="submitScoreAndNamePopup"/>
		</parsley:PopUp>

		<!-- Controllers here -->
		<!-- Tasks -->
		<task:SequenceTask id="startUpSequenceTask"
						   label="startUp">
			<tasks:CreateChessGasketTask id="ccgTask"
										 label="create chess gasket"/>
			<tasks:CreateChessPieceTask label="create chess piece"/>
			<tasks:CreateChessVoTask label="create chess VO"/>
		</task:SequenceTask>

		<!--<task:SequenceTask id="cleanUp" label="cleanUp">
			<tasks:CleanUpChessPieceTask label="clean up chess pieces"/>
			<tasks:CleanUpPiecesBitboardTask label="clean up pieces bitboard"/>
		</task:SequenceTask>-->
		<task1:SequentialTaskGroup id="cleanUp"
								   autoStart="false">

		</task1:SequentialTaskGroup>

		<!-- Services here -->
	</fx:Declarations>

	<!-- Views here -->
	<components:ChessBoard id="chessBoard"
						   left="25"
						   right="75"
						   top="25"
						   bottom="25"
						   backgroundImage="@Embed('./assets/images/ChessBoardBG.png')"
						   backgroundImageFillMode="scale"/>
	<!-- MochiMedia popup View -->
	<mochi:MochiUIComponent id="mochiUIComponent"
							x="0"
							y="0"/>
	<!-- MochiMedia toolbar View -->
	<mochi:MochiToolBarVGroup right="0"/>

</s:Application>
