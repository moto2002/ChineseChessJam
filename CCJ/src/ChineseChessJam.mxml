<?xml version="1.0" encoding="utf-8"?>
<app:ApplicationBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/halo"
					 xmlns:app="*"
					 xmlns:components="com.godpaper.as3.views.components.*"
					 xmlns:popup="com.adobe.cairngorm.popup.*"
					 xmlns:controller="com.lookbackon.ccj.controller.*"
					 xmlns:task="com.adobe.cairngorm.task.*"
					 xmlns:tasks="com.godpaper.as3.tasks.*"
					 xmlns:mochi="com.godpaper.as3.views.mochi.*"
					 xmlns:parsley="http://www.spicefactory.org/parsley"
					 xmlns:mx1="library://ns.adobe.com/flex/mx"
					 width="550"
					 height="520"
					 maxWidth="550"
					 maxHeight="520"
					 xmlns:task1="org.spicefactory.lib.task.*"
					 xmlns:popups="com.godpaper.as3.views.popups.*"
					 usePreloader="true"
					 preloader="com.godpaper.ccj.utils.CustomPreloaderDefault"
					 >
	<fx:Script>
		<![CDATA[
			import assets.EmbededAssets;

			import com.adobe.cairngorm.contract.Contract;
			import com.godpaper.as3.business.factory.ChessFactoryBase;
			import com.godpaper.as3.configs.BoardConfig;
			import com.godpaper.as3.configs.CCJContextConfig;
			import com.godpaper.as3.configs.GameConfig;
			import com.godpaper.as3.configs.IndicatorConfig;
			import com.godpaper.as3.configs.PieceConfig;
			import com.godpaper.as3.configs.PluginConfig;
			import com.godpaper.as3.consts.DefaultConstants;
			import com.godpaper.as3.model.ChessPiecesModel;
			import com.godpaper.as3.model.plugin.MochiModel;
			import com.godpaper.as3.utils.LogUtil;
			import com.godpaper.ccj.business.factory.CcjChessFactory;
			import com.godpaper.ccj.business.managers.CcjChessPieceManager;
			import com.lookbackon.AI.searching.AttackFalse;
			import com.lookbackon.AI.searching.MiniMax;
			import com.lookbackon.AI.searching.RandomWalk;
			import com.lookbackon.AI.searching.ShortSighted;

			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.LogEventLevel;

			import org.spicefactory.lib.logging.LogContext;
			import org.spicefactory.lib.logging.Logger;

			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//For mochi.
			public var _mochiads_game_id:String="47de4a85dd3e213a";
			//
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:Logger=LogContext.getLogger(ChineseChessJam);
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//application1_preinitializeHandler
			override protected function preinitializeHandler(event:FlexEvent):void
			{
				//config initialization here.
				//about chess board:
				BoardConfig.xLines=9;
				BoardConfig.yLines=10;
				BoardConfig.xOffset=50;
				BoardConfig.yOffset=50;
				BoardConfig.xAdjust=50;
				BoardConfig.yAdjust=-1;
				//about piece:
				PieceConfig.factory = CcjChessFactory;
				//about plugin:
				PluginConfig.mochiBoardID = "3a460211409897f4";
				PluginConfig.mochiGameID = "47de4a85dd3e213a";
				PluginConfig.mochiIcons = EmbededAssets.ICON_TOLL_GATE;
			}

			//application1_initializeHandler
			override protected function initializeHandler(event:FlexEvent):void
			{
				//number of tollgate tips would be matched with tollgates!
				GameConfig.tollgates=[RandomWalk, ShortSighted, AttackFalse, AttackFalse, MiniMax];
				GameConfig.tollgateTips=["baby intelligence", "fellow intelligence", "man intelligence", "guru intelligence"];
				GameConfig.turnFlag=DefaultConstants.FLAG_RED;
				//
				GameConfig.chessPieceManager = new CcjChessPieceManager();
			}

			//  application1_creationCompleteHandler
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				//create chess gaskets.
				//create chess piece
				//create chess pieces' chessVO;
				//create chess pieces' omenVO;
				this.startUpSequenceTask.start();
				//init data struct.@see ChessPieceModel dump info.
				this.dumpFootSprint();
			}
			//
			override protected function applicationCompleteHandler(event:FlexEvent):void
			{
				super.applicationCompleteHandler(event);
			}

			//
			override public function dumpFootSprint():void
			{
				//design by contract.
				//@see http://opensource.adobe.com/wiki/display/cairngorm/HowToUseCairngormContract
				try
				{
					var CONFIG:Namespace=new Namespace("CONFIG");
					Contract.precondition(CONFIG::debugging);
					this.traceTarget.level=LogEventLevel.DEBUG;
					Contract.postcondition(CONFIG::debugging);
				}
				catch (error:Error)
				{
					LOG.warn("CONFIG::debugging {0}", error.toString());
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!---
		The context for bootstrapping the whole Parsley framework.
		-->
		<parsley:ContextBuilder config="com.godpaper.as3.configs.CCJContextConfig">

		</parsley:ContextBuilder>

		<!---
		The system unique logging component provider LOG.debug/info/warn/error/fatal avenues.
		-->
		<s:TraceTarget id="traceTarget"
					   fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.INFO}">
			<s:filters>
				[
					com.lookbackon.AI.searching.*,
					*
				]
			</s:filters>
		</s:TraceTarget>

		<!-- Popups here -->
		<popup:PopUpWrapper open="{IndicatorConfig.readOut}"
							center="true"
							modal="true">
			<popups:ThinkIndicatory/>
		</popup:PopUpWrapper>

		<parsley:PopUp open="{IndicatorConfig.check}"
					   center="true"
					   modal="true">
			<popups:CheckIndicatory/>
		</parsley:PopUp>

		<parsley:PopUp open="{IndicatorConfig.submitScore}"
					   center="true"
					   modal="true">
			<mochi:SubmitScoreAndNextRound id="submitScoreAndNamePopup"/>
		</parsley:PopUp>

		<!-- Controllers here -->
		<!-- Tasks -->
		<task:SequenceTask id="startUpSequenceTask"
						   label="startUp">
			<tasks:CreateChessGasketTask id="ccgTask"
										 label="create chess gasket"
										 factory="{ChessFactoryBase}"/>
			<tasks:CreateChessPieceTask label="create chess piece"
										factory="{CcjChessFactory}"/>
			<tasks:CreateChessVoTask label="create chess VO"
									 factory="{CcjChessFactory}"/>
		</task:SequenceTask>

		<!--<task:SequenceTask id="cleanUp" label="cleanUp">
			<tasks:CleanUpChessPieceTask label="clean up chess pieces"/>
			<tasks:CleanUpPiecesBitboardTask label="clean up pieces bitboard"/>
		</task:SequenceTask>-->
		<task1:SequentialTaskGroup id="cleanUpSequenceTask"
								   autoStart="false">

		</task1:SequentialTaskGroup>

		<!-- Services here -->
	</fx:Declarations>
	<!-- Views here -->
	<components:ChessBoard id="chessBoard"
						   left="25"
						   right="75"
						   top="25"
						   bottom="25"
						   backgroundImage="@Embed('./assets/images/background/ChineseChessJam.png')"
						   backgroundImageFillMode="scale"/>
	<!-- MochiMedia popup View -->
	<mochi:MochiUIComponent id="mochiUIComponent"
							x="0"
							y="0"/>
	<!-- MochiMedia toolbar View -->
	<mochi:MochiToolBarVGroup right="0"/>

</app:ApplicationBase>
