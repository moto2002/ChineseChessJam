<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   minWidth="1024" minHeight="768"
			   creationComplete="application1_creationCompleteHandler(event)" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" >
	<fx:Script>
		<![CDATA[
			import com.godpaper.as3.consts.CcjPiecesConstants;
			import com.godpaper.ccj.vo.PawnVO;
			import com.godpaper.as3.utils.LogUtil;
			import com.lookbackon.ds.BitBoard;
			
			import de.polygonal.ds.Array2;
			
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.LogEventLevel;
			import mx.managers.CursorManager;
			
			private static const LOG:ILogger  = LogUtil.getLogger(Flex4Test);
			
			private var blackPieces:BitBoard;
			private var redPieces:Array2;
			private var netConnection:NetConnection;
			[Bindable]
			private var user:String;
			[Bindable]
			private var connected:Boolean;
			
			private var groupSpec:GroupSpecifier;
			private var netGroup:NetGroup;
			
			//about p2p
			public static const STRATUS_ADDRESS:String 	= "rtmfp://stratus.adobe.com/";
			public static const STRATUS_DEV_KEY:String  = "40a1c5b634bc4f531ad7757f-2e3cf422214e";
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				/* blackPieces = new BitBoard(9,10);
				blackPieces.setBitt(0,2,true);
				blackPieces.setBitt(0,3,true);
				blackPieces.setBitt(2,3,true);
				blackPieces.setBitt(7,7,true);
				LOG.debug("blackPieces.getBitt(2,3):{0}",blackPieces.getBitt(2,3).toString());
				LOG.debug(blackPieces.dump());
				blackPieces.setAll();
				LOG.debug(blackPieces.dump());
				blackPieces.clear();
				LOG.debug(blackPieces.dump()); */
				/* for(var x:uint=1;x<=32768;x<<=4)
				{
					trace(x.toString(16),(x<<1).toString(16),(x<<2).toString(16),(x<<3).toString(16));
				}
				var index:int = 2;
				trace(index & 0x40);  */
				redPieces = new Array2(9,9);
				redPieces.sett(2,0,1);
				redPieces.sett(3,0,1);
//				trace(redPieces.dump());
				LOG.debug(redPieces.dump());
				/* var castleVO:CastleVO = new CastleVO(9,10,3,3);
				LOG.debug("castleVO:{0}",castleVO.dump()); */
				/* var cannonVO:CannonVO = new CannonVO(9,10,1,1);
				LOG.debug("cannonVO:{0}",cannonVO.dump()); */
				/* var knightVO:KnightVO = new KnightVO(9,10,1,1);
				LOG.debug("knightVO:{0}",knightVO.dump()); */
				/* var bishopVO:BishopVO = new BishopVO(9,10,2,4);
				LOG.debug("bishopVO:{0}",bishopVO.dump()); */
				/* var officalVO:OfficalVO = new OfficalVO(9,10,1,4);
				LOG.debug("officalVO:{0}",officalVO.dump()); */
				/* var marshallVO:MarshalVO = new MarshalVO(9,10,1,4);
				LOG.debug("marshallVO:{0}",marshallVO.dump()); */
				var pawnVO:PawnVO = new PawnVO(9,10,3,4);
				LOG.debug("pawnVO:{0}",pawnVO.dump());
				//test p2p
				this.setupNetConnection();
			}
			
			/* File -> New -> Flex Project
			Link new playerglobal.swc (FP10.1 API) to your project in Project Properties 
			and set compiler version in Flex Compiler to 10.1.0			
			Step 2: Connect to Stratus
			First of all we need to setup NetConnection to Adobe Stratus. 
			That’s easy part. */
			private function setupNetConnection():void
			{
				this.netConnection = new NetConnection();
				this.netConnection.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);
				this.netConnection.connect(STRATUS_ADDRESS.concat(STRATUS_DEV_KEY));
				CursorManager.setBusyCursor();
				this.myLabel.text = "Connecting...";
			}
			/* We need to setup P2P group and connect to it. 
			GroupSpecifier is a class, which let’s you 
			to define all the parameters of the group. 
			First you give it a name - in this case “myGroup/g1″. 
			Then you set it to use serverChannel, to let it communicate with Stratus. 
			Finally we enable Posting. That’s all you have to do to define the P2P Group.
			Then we have to define the actual NetGroup. 
			groupspecWithAuthorizations() returns String 
			- it’s a group identifier. Now you probably ask, 
			what’s the difference between groupspecWithoutAuthorizations() 
			and groupspecWithAuthorizations(). 
			If you set a posting or multicast password, 
			the one “with” can post or multicast, the one “without” is receive-only. */
			private function setupGroup():void
			{
				groupSpec = new GroupSpecifier("myGroup/g1");
				groupSpec.serverChannelEnabled = true;
				groupSpec.postingEnabled = true;
				
				this.netGroup = new NetGroup(this.netConnection,this.groupSpec.groupspecWithAuthorizations());
				this.netGroup.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);
				
				this.user = "user"+Math.round(Math.random()*10000);
				
			}
			
			private function netStatusHandler(event:NetStatusEvent):void
			{
				this.myLabel.text = event.info.code;
				switch(event.info.code)
				{
					case "NetConnection.Connect.Success":
						setupGroup();
						break;
					case "NetGroup.Connect.Success":
						connected = true;
						CursorManager.removeBusyCursor();
						break;
					case "NetGroup.Posting.Notify":
						receiveMessage(event.info.message);
						break;
					default:
						break;
				}
			}
			
			private function sendMessage():void
			{
				var message:Object = new Object();
				message.sender = this.netGroup.convertPeerIDToGroupAddress(this.netConnection.nearID);
				message.user = this.myUserLabel.text;
				message.text = this.myTextInput.text;
				
				this.netGroup.post(message);
				
				this.receiveMessage(message);
				
				this.myTextInput.text = "";
			}
			
			private function receiveMessage(message:Object):void{
				write(message.user+": "+message.text);
			}
			
			private function write(txt:String):void{
				this.myTextArea.text += txt+"\n";
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayList id="arrList" source="[Red,Orange,Yellow,Green,Blue]"/>
		
		<fx:Component className="ico">
			<s:Graphic>
				<s:states>
					<s:State name="up"/>
					<s:State name="over"/>
					<s:State name="down"/>
					<s:State name="disable"/>
				</s:states>
				<s:Ellipse width="80" height="80">
					<s:fill>
						<s:SolidColor color="red" color.over="green" color.down="blue"/>
					</s:fill>
				</s:Ellipse>
			</s:Graphic>
		</fx:Component>
		<s:TraceTarget fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.ALL}"
					   />
	</fx:Declarations>
	<s:VGroup horizontalCenter="0" verticalCenter="0">
		<!--<s:Graphic>
			<s:Rect width="200" height="200">
				<s:fill>
					<s:SolidColor id="sc" color="0xffccdd"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="0xffeeff" weight="2"/>
				</s:stroke>
			</s:Rect>
		</s:Graphic>-->
		<s:Label id="myLabel" text="start"/>
		<s:TextArea id="myTextArea" width="200" height="200">
		</s:TextArea>
		<s:HGroup>
			<s:Label id="myUserLabel" text="{user}"/>
			<s:TextInput id="myTextInput" enter="sendMessage()"/>
			<mx:LinkButton id="myLinkButton" label="OK" enabled="{connected}" click="sendMessage()"/>
		</s:HGroup>
	</s:VGroup>
</s:Application>
