<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/halo"
				   width="50"
				   height="50"
				   implements="com.lookbackon.ccj.view.components.IChessGasket"
				   creationComplete="group1_creationCompleteHandler(event)"
				   borderVisible="false"
				   backgroundAlpha="0.0"
				   contentBackgroundAlpha="0.0"
				   borderAlpha="0.0"
				   xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Script>
		<![CDATA[
			import com.godpaper.model.MochiModel;
			import com.lookbackon.ccj.CcjConstants;
			import com.lookbackon.ccj.managers.ChessPieceManager;
			import com.lookbackon.ccj.managers.GameManager;
			import com.lookbackon.ccj.model.ChessPiecesModel;
			import com.lookbackon.ccj.model.vos.ConductVO;
			import com.lookbackon.ccj.utils.LogUtil;
			import com.lookbackon.ds.BitBoard;

			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.managers.DragManager;

			import spark.events.ElementExistenceEvent;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			private var currentConductVO:ConductVO;
			//mochi model
			[Inject]
			[Bindable]
			public var mochiModel:MochiModel;
			//chess pieces model
			[Bindable]
			private var chessPiecesModel:ChessPiecesModel=ChessPiecesModel.getInstance();
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger=LogUtil.getLogger(ChessGasket);
			//--------------------------------------------------------------------------
			//
			//  Properties(implement)
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  position
			//----------------------------------
			private var _position:Point;

			public function get position():Point
			{
				return _position;
			}

			public function set position(value:Point):void
			{
				_position=value;
			}
			//----------------------------------
			//  chessPiece
			//----------------------------------
			private var _chessPiece:IChessPiece;

			public function get chessPiece():IChessPiece
			{
				return _chessPiece;
			}

			public function set chessPiece(value:IChessPiece):void
			{
				_chessPiece=value;
				//
				if (null != value)
				{
					this.addElement(value);
				}
				else
				{
					this.removeElementAt(0);
				}
			}

			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//group1_creationCompleteHandler
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.addEventListener(DragEvent.DRAG_ENTER, dragEnterHandler);
				this.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
				//once piece add or remove,maybe check event triggled.
				this.addEventListener(ElementExistenceEvent.ELEMENT_ADD, elementAddHandler);
				this.addEventListener(ElementExistenceEvent.ELEMENT_REMOVE, elementRemoveHandler);
			}

			//dragEnterHandler
			private function dragEnterHandler(event:DragEvent):void
			{
				var myConductVO:ConductVO=new ConductVO();
				myConductVO.target=event.dragInitiator as ChessPiece;
				myConductVO.previousPosition=this.position;
				if (ChessPieceManager.doMoveValidation(myConductVO))
				{
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
					DragManager.showFeedback(DragManager.LINK);
				}
				// remove event listener
//				this.removeEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
			}

			//dragDropHandler
			private function dragDropHandler(event:DragEvent):void
			{
				var myConductVO:ConductVO=new ConductVO();
				myConductVO.target=event.dragInitiator as ChessPiece;
				myConductVO.previousPosition=(event.dragInitiator as ChessPiece).position;
				myConductVO.nextPosition=this.position;
				//make move.
				ChessPieceManager.makeMove(myConductVO);
				//
				event.stopImmediatePropagation();
				//computer take turns.
//				CairngormEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.IS_COMPUTER_TURN_NOW));
			}

			//
			private function elementAddHandler(event:ElementExistenceEvent):void
			{
				LOG.debug("ElementExistenceEvent,element:{0},@index:{1}", event.element, event.index.toString());
				//renew ChessPiece's position.
//				ChessPiece(event.element).position = this.position;
				//clear gasket indicate effect.
				var emptyLegalMoves:BitBoard=new BitBoard(9, 10);
				emptyLegalMoves.clear();
				//empty indicate effect.
				ChessPieceManager.indicateGaskets(emptyLegalMoves);
				//check indicate handler.
				if (mochiModel.hasCheckIndicator && GameManager.isRunning)
				{
					//Notice:after apply move ture flag changed immidiatly,but check indicator ongoing.
					if (CcjConstants.FLAG_BLUE == GameManager.turnFlag)
					{
						ChessPieceManager.indicateCheck(chessPiecesModel.pieces, chessPiecesModel.BLUE_MARSHAL);
					}
					else
					{
						ChessPieceManager.indicateCheck(chessPiecesModel.pieces, chessPiecesModel.RED_MARSHAL);
					}
				}
			}

			//
			private function elementRemoveHandler(event:ElementExistenceEvent):void
			{
				//
				if (mochiModel.hasCheckIndicator && GameManager.isRunning)
				{
					//Notice:turn flag change after remove piece at apply move behavior.
					if (CcjConstants.FLAG_BLUE == GameManager.turnFlag)
					{
						ChessPieceManager.indicateCheck(chessPiecesModel.pieces, chessPiecesModel.RED_MARSHAL);
					}
					else
					{
						ChessPieceManager.indicateCheck(chessPiecesModel.pieces, chessPiecesModel.BLUE_MARSHAL);
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<parsley:Configure/>
	</fx:Declarations>
	<!--<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="white" alpha=".5"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="white" alpha=".5"/>
		</s:fill>
	</s:Rect>-->
</s:BorderContainer>
