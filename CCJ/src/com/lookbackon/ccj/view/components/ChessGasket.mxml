<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 width="50" height="50"
		 implements="com.lookbackon.ccj.view.components.IChessGasket" 
		 creationComplete="group1_creationCompleteHandler(event)" 
		 >
	<fx:Script>
		<![CDATA[
			import com.lookbackon.ccj.business.factory.ChessFactory;
			import com.lookbackon.ccj.managers.ChessPieceManager;
			import com.lookbackon.ccj.model.ChessPositionModelLocator;
			import com.lookbackon.ccj.model.vos.ConductVO;
			import com.lookbackon.ccj.utils.LogUtil;
			
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.managers.DragManager;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger = LogUtil.getLogger(ChessGasket);
			//--------------------------------------------------------------------------
			//
			//  Properties(implement)
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  position
			//----------------------------------
			private var _position:Array;
			public function get position():Array
			{
				return _position;
			}
			public function set position(value:Array):void
			{
				_position = value;
			}
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//group1_creationCompleteHandler
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
				this.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
			}
			//dragEnterHandler
			private function dragEnterHandler(event:DragEvent):void
			{
				var myConductVO:ConductVO = new ConductVO();
				myConductVO.target = event.dragInitiator as ChessPiece;
				myConductVO.newPosition = this.position;
				if(ChessPieceManager.doMoveValidation(myConductVO))
				{
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
					DragManager.showFeedback(DragManager.LINK);
				}
				// remove event listener
//				this.removeEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
			}
			//dragDropHandler
			private function dragDropHandler(event:DragEvent):void
			{
				//hold gasket skin,then remove previous chess piece.
				if(this.numElements>=2)
				{
					this.removeElementAt(1);
				}
				//add chess piece position.
				this.addElement(event.dragInitiator as IVisualElement);
				//update chess piece position.
				event.dragInitiator.x = 0;
				event.dragInitiator.y = 0;
				//update data.
				var conductVO:ConductVO = new ConductVO();
				conductVO.newPosition = this.position;
				conductVO.target = ChessPiece(event.dragInitiator);
				//set new chessVO.
				LOG.info("before move,oldChessVO:{0}",conductVO.dump());
				ChessPiece(event.dragInitiator).chessVO = ChessFactory.generateChessPieceVO(conductVO,true);
				//set new position.
				ChessPiece(event.dragInitiator).position = this.position;
				//
				LOG.info("after move,allPieces:{0}",ChessPositionModelLocator.getInstance().allPieces.dump());
				// remove event listener
//				this.removeEventListener(DragEvent.DRAG_DROP,dragDropHandler);
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="black"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="black"/>
		</s:fill>
	</s:Rect>
</s:Group>
