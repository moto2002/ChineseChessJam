<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 width="50" height="50"
		 implements="com.lookbackon.ccj.view.components.IChessGasket" 
		 creationComplete="group1_creationCompleteHandler(event)" 
		 >
	<fx:Script>
		<![CDATA[
			import com.lookbackon.ccj.business.factory.ChessFactory;
			import com.lookbackon.ccj.managers.ChessPieceManager;
			import com.lookbackon.ccj.model.ChessPiecesModel;
			import com.lookbackon.ccj.model.vos.ConductVO;
			import com.lookbackon.ccj.model.vos.cvo.ChessVO;
			import com.lookbackon.ccj.utils.LogUtil;
			
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.managers.DragManager;
			
			import spark.events.ElementExistenceEvent;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger = LogUtil.getLogger(ChessGasket);
			private var currentConductVO:ConductVO;
			//--------------------------------------------------------------------------
			//
			//  Properties(implement)
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  position
			//----------------------------------
			private var _position:Point;
			public function get position():Point
			{
				return _position;
			}
			public function set position(value:Point):void
			{
				_position = value;
			}
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//group1_creationCompleteHandler
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
				this.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
				//
				this.addEventListener(ElementExistenceEvent.ELEMENT_ADD,elementAddHandler);
			}
			//dragEnterHandler
			private function dragEnterHandler(event:DragEvent):void
			{
				var myConductVO:ConductVO = new ConductVO();
				myConductVO.target = event.dragInitiator as ChessPiece;
				myConductVO.newPosition = this.position;
				if(ChessPieceManager.doMoveValidation(myConductVO))
				{
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
					DragManager.showFeedback(DragManager.LINK);
				}
				// remove event listener
//				this.removeEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
			}
			//dragDropHandler
			private function dragDropHandler(event:DragEvent):void
			{
				//make move.
				var myConductVO:ConductVO = new ConductVO();
				myConductVO.target = event.dragInitiator as ChessPiece;
				myConductVO.newPosition = this.position;
				ChessPieceManager.makeMove(myConductVO);
			}
			
			private function elementAddHandler(event:ElementExistenceEvent):void
			{
//				LOG.debug("ElementExistenceEvent");
				//renew data.
				currentConductVO = new ConductVO();
				currentConductVO.target = ChessPiece(event.element);
				currentConductVO.newPosition = this.position;
				LOG.info("preBefore move,renew conductVO:{0}",currentConductVO.dump());
				//renew chessVO.
				currentConductVO.target.chessVO = ChessFactory.generateChessVO(currentConductVO,true);
				LOG.info("preBefore move,renew chessVO.occupies:{0}",currentConductVO.target.chessVO.occupies.dump());
				LOG.info("preBefore move,renew chessVO.moves:{0}",currentConductVO.target.chessVO.moves.dump());
				LOG.info("preBefore move,renew chessVO.captures:{0}",currentConductVO.target.chessVO.captures.dump());
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="black"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="black"/>
		</s:fill>
	</s:Rect>
</s:Group>
