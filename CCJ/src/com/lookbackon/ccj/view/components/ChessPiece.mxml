<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/halo"
		  width="50" height="50" cornerRadius="25"
		  implements="com.lookbackon.ccj.view.components.IChessPiece" 
		  creationComplete="button1_creationCompleteHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.lookbackon.ccj.CcjConstants;
			import com.lookbackon.ccj.business.factory.ChessFactory;
			import com.lookbackon.ccj.business.fsm.ChessAgent;
			import com.lookbackon.ccj.business.fsm.states.AttackState;
			import com.lookbackon.ccj.business.fsm.states.DefenseState;
			import com.lookbackon.ccj.managers.ChessPieceManager;
			import com.lookbackon.ccj.model.vos.ConductVO;
			import com.lookbackon.ccj.model.vos.cvo.IChessVO;
			import com.lookbackon.ccj.utils.LogUtil;
			
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.managers.DragManager;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			public var attackState:AttackState;
			public var defenseState:DefenseState;
			private var textColor:String = CcjConstants.COLOR_BLUE;//default is blue.
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			private static const LOG:ILogger = LogUtil.getLogger(ChessPiece);
			//--------------------------------------------------------------------------
			//
			//  Properties(implementataion)
			//
			//--------------------------------------------------------------------------
			//----------------------------------
			//  agent
			//----------------------------------
			private var _agent:ChessAgent;
			public function get agent():ChessAgent
			{
				return _agent;
			}
			public function set agent(value:ChessAgent):void
			{
				_agent = value;
			}
			//----------------------------------
			//  position
			//----------------------------------
			private var _position:Point;
			public function get position():Point
			{
				return _position;
			}
			public function set position(value:Point):void
			{
				_position = value;
			}
			//----------------------------------
			//  chessVO
			//----------------------------------
			private var _chessVO:IChessVO;
			public function get chessVO():IChessVO
			{
				return _chessVO;
			}
			public function set chessVO(value:IChessVO):void
			{
				_chessVO = value;
			}
			//----------------------------------
			//  flag
			//----------------------------------
			private var _flag:int;
			public function get flag():int
			{
				return _flag;
			}
			public function set flag(value:int):void
			{
				_flag = value;
				//
				if(value!=CcjConstants.FLAG_BLUE)
				{
					this.textColor = CcjConstants.COLOR_RED;
					this.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);
				}
			}
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			//button1_creationCompleteHandler
			protected function button1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				// finite state machine initialization.
				this.agent = new ChessAgent(this.name,this,null);
				this.attackState = new AttackState(this.agent,null,"Attack");
				this.defenseState = new DefenseState(this.agent,null,"Defense");
				// add event listener
				
				//set text style.
				this.setStyle("color",textColor);
				this.setStyle("fillColor",textColor);
			}
			//mouseDownHandler
			private function mouseDownHandler(event:MouseEvent):void
			{
				DragManager.doDrag(event.currentTarget as IUIComponent,null,event);
				// remove event listener
//				this.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);
				//renew data.
				var conductVO:ConductVO = new ConductVO();
				conductVO.newPosition = this.position;
				conductVO.target = this;
				//renew chessVO.
				this.chessVO = ChessFactory.generateChessVO(conductVO,true);
				LOG.info("preBefore move,renew chessVO.occupies:{0}",this.chessVO.occupies.dump());
				LOG.info("preBefore move,renew chessVO.moves:{0}",this.chessVO.moves.dump());
				LOG.info("preBefore move,renew chessVO.captures:{0}",this.chessVO.captures.dump());
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:Button>
