<?xml version="1.0" encoding="utf-8"?>
<app:ApplicationBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:app="*"
					 width="450"
					 height="400"
					 xmlns:parsley="http://www.spicefactory.org/parsley"
					 xmlns:impl="com.godpaper.impl.*"
					 xmlns:popup="com.adobe.cairngorm.popup.*"
					 xmlns:popups="com.godpaper.views.popups.*"
					 xmlns:task="com.adobe.cairngorm.task.*"
					 xmlns:tasks="com.godpaper.tasks.*"
					 xmlns:task1="org.spicefactory.lib.task.*"
					 xmlns:mochi="com.godpaper.views.mochi.*"
					 >
	<fx:Script>
		<![CDATA[
			import com.godpaper.business.factory.CcjChessFactory;
			import com.godpaper.business.factory.ChessFactoryBase;
			import com.godpaper.business.factory.ThoChessFactory;
			import com.godpaper.configs.BoardConfig;
			import com.godpaper.configs.CCJContextConfig;
			import com.godpaper.configs.GameConfig;
			import com.godpaper.configs.IndicatorConfig;
			import com.godpaper.configs.PieceConfig;
			import com.godpaper.configs.PluginConfig;
			import com.godpaper.consts.CcjConstants;
			import com.godpaper.model.plugin.MochiModel;
			import com.lookbackon.AI.searching.*;

			import mx.events.FlexEvent;
			import mx.logging.LogEventLevel;
			//--------------------------------------------------------------------------
			//
			//  Variables
			//
			//--------------------------------------------------------------------------
			//For mochi.
			public var _mochiads_game_id:String = "cc2fd3b3196f4281";
			//
			[Inject][Bindable]
			public var mochiModel:MochiModel;
			//----------------------------------
			//  CONSTANTS
			//----------------------------------
			//
			override protected function preinitializeHandler(event:FlexEvent):void
			{
				//about board:
				BoardConfig.xLines=4;
				BoardConfig.yLines=4;
				BoardConfig.xOffset=100;
				BoardConfig.yOffset=100;
				BoardConfig.width=300;
				BoardConfig.height=300;
				BoardConfig.xScale=1;
				BoardConfig.yScale=1;
				//about piece:
				PieceConfig.factory = ThoChessFactory;
				//about plugin:
				PluginConfig.mochiBoardID = "51c558cd0315f8e7";
				PluginConfig.mochiGameID = "cc2fd3b3196f4281";
			}
			//	
			override protected function initializeHandler(event:FlexEvent):void
			{
				//number of tollgate tips would be matched with tollgates!
				GameConfig.tollgates=[RandomWalk];
				GameConfig.tollgateTips=["baby intelligence"];
				GameConfig.turnFlag=CcjConstants.FLAG_RED;//human first.
			}
			//
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				startUpSequenceTask.start();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!---
			The context for bootstrapping the whole Parsley framework.
		-->
		<parsley:ContextBuilder config="{CCJContextConfig}"/>

		<!---
			The system unique logging component provider LOG.debug/info/warn/error/fatal avenues.
		-->
		<s:TraceTarget id="traceTarget"
					   fieldSeparator="->"
					   includeCategory="true"
					   includeDate="false"
					   includeLevel="true"
					   includeTime="true"
					   level="{LogEventLevel.DEBUG}">
			<s:filters>
				[
				com.lookbackon.AI.searching.*,
				*
				]
			</s:filters>
		</s:TraceTarget>
		<!-- Popups here -->
		<popup:PopUpWrapper open="{IndicatorConfig.readOut}"
							center="true"
							modal="true">
			<popups:ThinkIndicatory/>
		</popup:PopUpWrapper>

		<parsley:PopUp open="{IndicatorConfig.check}"
					   center="true"
					   modal="true">
			<popups:CheckIndicatory/>
		</parsley:PopUp>

		<parsley:PopUp open="{IndicatorConfig.submitScore}"
					   center="true"
					   modal="true"
					   >
			<mochi:SubmitScoreAndNextRound id="submitScoreAndNamePopup"/>
		</parsley:PopUp>

		<!-- Controllers here -->

		<!-- Tasks -->
		<task:SequenceTask id="startUpSequenceTask"
						   label="startUp">
			<tasks:CreateChessGasketTask id="ccgTask"
										 label="create chess gasket"
										 factory="{ChessFactoryBase}"/>
			<tasks:CreateChessPieceTask label="create chess piece"
										factory="{ThoChessFactory}"/>
			<tasks:CreateChessVoTask label="create chess VO"
									 factory="{ThoChessFactory}"
									 />
		</task:SequenceTask>

		<!--<task:SequenceTask id="cleanUp" label="cleanUp">
		<tasks:CleanUpChessPieceTask label="clean up chess pieces"/>
		<tasks:CleanUpPiecesBitboardTask label="clean up pieces bitboard"/>
		</task:SequenceTask>-->
		<task1:SequentialTaskGroup id="cleanUpSequenceTask"
								   autoStart="false">

		</task1:SequentialTaskGroup>

		<!-- Services here -->
	</fx:Declarations>

	<!---
		Vistual elements at stage here.
	-->
	<s:VGroup top="50"
			  right="100"
			  left="50"
			  bottom="50"
			  >
		<impl:ChessBoardDefault id="defaultChessBoard"
								/>
	</s:VGroup>

	<!-- MochiMedia popup View -->
	<mochi:MochiUIComponent id="mochiUIComponent"
							x="0"
							y="0"/>
	<!-- MochiMedia toolbar View -->
	<mochi:MochiToolBarVGroup right="0"/>
</app:ApplicationBase>
